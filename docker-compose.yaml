services:
      prometheus:
        image: prom/prometheus:latest
        container_name: prometheus
        volumes:
          - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
        ports:
          - "9090:9090"
        networks:
          - fullstack
        labels:
          - "traefik.enable=true"
          - "traefik.http.routers.prometheus.rule=Host(`prometheus.localhost`)"
          - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
      grafana:
        image: grafana/grafana-oss:latest
        container_name: grafana
        ports:
          - "3000:3000"
        environment:
          - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN}
          - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
        volumes:
          - ./grafana/grafana.yml:/etc/grafana/provisioning/datasource/datasource.yml
          - grafana-data:/var/lib/grafana
        networks:
          - fullstack
        depends_on:
          - prometheus
        labels:
          - "traefik.enable=true"
          - "traefik.http.routers.grafana.rule=Host(`grafana.localhost`)"
          - "traefik.http.services.grafana.loadbalancer.server.port=3000"
      api1:
        build:
          context: .
        depends_on:
          db:
            condition: service_healthy
        labels:
          - "traefik.enable=true"
          - "traefik.http.routers.api.rule=Host(`localhost`)"
          - "traefik.http.services.api.loadbalancer.server.port=4000"
        links:
          - db
        networks:
          - fullstack
        environment:
          POSTGRES_USER: ${POSTGRES_USER}
          POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
          POSTGRES_DB: ${POSTGRES_DB}
          POSTGRES_PORT: ${POSTGRES_PORT}
      api2:
        build:
          context: .
        depends_on:
          db:
            condition: service_healthy
        labels:
          - "traefik.enable=true"
          - "traefik.http.routers.api.rule=Host(`localhost`)"
          - "traefik.http.services.api.loadbalancer.server.port=4000"
        links:
          - db
        networks:
          - fullstack
        environment:
          POSTGRES_USER: ${POSTGRES_USER}
          POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
          POSTGRES_DB: ${POSTGRES_DB}
          POSTGRES_PORT: ${POSTGRES_PORT}
      db:
        image: postgres:latest
        restart: always
        environment:
          POSTGRES_USER: ${POSTGRES_USER}
          POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
          POSTGRES_DB: ${POSTGRES_DB}
        ports:
            - "5432:5432"
        networks:
          - fullstack
        healthcheck:
          test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
          interval: 10s
          timeout: 5s
          retries: 5
        volumes:
          - db-data:/var/lib/postgresql/data
      traefik:
        image: traefik:v3.5
        command:
          - "--api.insecure=true"
          - "--providers.docker=true"
          - "--entrypoints.web.address=:80"
          - "--metrics.prometheus=true"
          - "--metrics.prometheus.addEntryPointsLabels=true"
          - "--metrics.prometheus.addServicesLabels=true"
        ports:
          - "80:80"
          - "8080:8080"
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
        networks:
          - fullstack
      # nginx:
      #   image: nginx:latest
      #   ports:
      #     - "80:80"
      #   depends_on:
      #     api1:
      #       condition: service_started
      #     api2:
      #       condition: service_started
      #   networks:
      #     - fullstack
      #   volumes:
      #     - ./nginx.conf:/etc/nginx/nginx.conf:ro

networks: 
    fullstack:
        driver: bridge

volumes:
  db-data:
  grafana-data: